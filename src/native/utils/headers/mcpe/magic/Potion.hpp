#ifndef _POTION_H
#define _POTION_H

//This header template file is generated by Disassembler.

class Potion {
public:
    //Fields
    char filler_Potion[UNKNOW_SIZE];
public:
    //Methods
    Potion(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    Potion(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, MobEffectInstance const&, Potion::PotionVariant);
    Potion(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, MobEffectInstance const&, Potion::PotionVariant);
    Potion(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >, std::__ndk1::vector<MobEffectInstance, std::__ndk1::allocator<MobEffectInstance> >, Potion::PotionVariant);
    Potion(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    Potion(Potion const&);
    ~Potion();
    void getMobEffect() const;
    void effectDurationToString(Potion::PotionType, float, MobEffectInstance const&) const;
    void effectDurationToString(Potion::PotionType, float) const;
    void getDescriptionId() const;
    void getBasePotion(int);
    void effectPotencyToString(MobEffectInstance const&) const;
    void getPotion(int);
    void getPotion(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    void getMobEffectId() const;
    void getName(Potion::PotionType) const;
    void getPotionVariant() const;
    void getPotentencyDescription(Potion::PotionType, float) const;
    void getPrefix() const;
    void getMobEffects() const;
    void getNameId() const;
    void getPotionCount();
    void getDescriptionId(Potion::PotionType) const;
    void appendFormattedPotionText(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&, Potion::PotionType, Potion::PotionVariant, Player const&, float) const;
    void addPotion(std::__ndk1::shared_ptr<Potion const>);
    void initPotions();
    void getPotentencyDescription(Potion::PotionType, float, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, MobEffectInstance const&) const;
    void shutdownPotions();
    void getPotionId() const;
public:
    //Objects
    static Potion * Leaping;
    static Potion * Healing;
    static Potion * Weakness;
    static Potion * SlowFalling;
    static Potion * mLastId;
    static Potion * LongMundane;
    static Potion * LongStrength;
    static Potion * Wither;
    static Potion * Slowness;
    static Potion * StrongTurtleMaster;
    static Potion * Regeneration;
    static Potion * Thick;
    static Potion * LongSlowFalling;
    static Potion * LongNightvision;
    static Potion * Harming;
    static Potion * StrongSlowness;
    static Potion * LongLeaping;
    static Potion * Nightvision;
    static Potion * StrongSwiftness;
    static Potion * StrongLeaping;
    static Potion * StrongHealing;
    static Potion * LongTurtleMaster;
    static Potion * Swiftness;
    static Potion * LongInvisibility;
    static Potion * Awkward;
    static Potion * StrongPoison;
    static Potion * StrongRegeneration;
    static Potion * Strength;
    static Potion * StrongHarming;
    static Potion * LongSwiftness;
    static Potion * WaterBreathing;
    static Potion * LongWeakness;
    static Potion * StrongStrength;
    static Potion * Invisibility;
    static Potion * LongSlowness;
    static Potion * Poison;
    static Potion * LongWaterBreathing;
    static Potion * TurtleMaster;
    static Potion * FireResistance;
    static Potion * Mundane;
    static Potion * LongPoison;
    static Potion * Water;
    static Potion * LongRegeneration;
    static Potion * mPotionsById;
    static Potion * LongFireResistance;
    static Potion * mPotionsByName;
};//Potion

#endif // _POTION_H
